/*
 * Copyright (C) 2006-2020  Music Technology Group - Universitat Pompeu Fabra
 *
 * This file is part of Essentia
 *
 * Essentia is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation (FSF), either version 3 of the License, or (at your
 * option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the Affero GNU General Public License
 * version 3 along with this program.  If not, see http://www.gnu.org/licenses/
 */

// NOTE: This source code is auto-generated.

#ifndef ESSENTIAJS_H
#define ESSENTIAJS_H

#include <vector>


class EssentiaJS {
  public:
    // property to store the current essentia library version
    std::string essentiaVersion;
    // constructor for instantiating the essentia algo registry with an optional argument to enable debug mode 
    EssentiaJS(bool debugger=false);
    // destructor for shutdown essentia instance
    ~EssentiaJS();
    // method for generating frames from a given audio signal
    std::vector<std::vector<float> > frameGenerator(std::vector<float>& signal, int frameSize, int hopSize);

    // NOTE: The following code snippets are machine generated. Do not edit.    
     
    float AfterMaxToBeforeMaxEnergyRatio(std::vector<float>& input_pitch);
    std::vector<float> AllPass(std::vector<float>& input_signal, const float bandwidth=500, const float cutoffFrequency=1500, const int order=1, const float sampleRate=44100);
    std::vector<float> AudioOnsetsMarker(std::vector<float>& input_signal, const std::vector<float>& onsets=std::vector<float>(), const float sampleRate=44100, const std::string& type="beep");
    std::vector<float> AutoCorrelation(std::vector<float>& input_array, const float frequencyDomainCompression=0.5, const bool generalized=false, const std::string& normalization="standard");
    void BFCC(std::vector<float>& input_spectrum, std::vector<float>& output_bands, std::vector<float>& output_bfcc, const int dctType=2, const float highFrequencyBound=11000, const int inputSize=1025, const int liftering=0, const std::string& logType="dbamp", const float lowFrequencyBound=0, const std::string& normalize="unit_sum", const int numberBands=40, const int numberCoefficients=13, const float sampleRate=44100, const std::string& type="power", const std::string& weighting="warping");
    float BPF(float input_x, const std::vector<float>& xPoints=std::vector<float>{0, 1}, const std::vector<float>& yPoints=std::vector<float>{0, 1});
    std::vector<float> BandPass(std::vector<float>& input_signal, const float bandwidth=500, const float cutoffFrequency=1500, const float sampleRate=44100);
    std::vector<float> BandReject(std::vector<float>& input_signal, const float bandwidth=500, const float cutoffFrequency=1500, const float sampleRate=44100);
    std::vector<float> BarkBands(std::vector<float>& input_spectrum, const int numberBands=27, const float sampleRate=44100);
    std::vector<float> BeatTrackerDegara(std::vector<float>& input_signal, const int maxTempo=208, const int minTempo=40);
    void BeatTrackerMultiFeature(std::vector<float>& input_signal, std::vector<float>& output_ticks, float output_confidence, const int maxTempo=208, const int minTempo=40);
    std::vector<std::vector<float> > Beatogram(std::vector<float>& input_loudness, std::vector<std::vector<float> >& input_loudnessBandRatio, const int size=16);
    void BeatsLoudness(std::vector<float>& input_signal, std::vector<float>& output_loudness, std::vector<std::vector<float> >& output_loudnessBandRatio, const float beatDuration=0.05, const float beatWindowDuration=0.1, const std::vector<float>& beats=std::vector<float>(), const std::vector<float>& frequencyBands=std::vector<float>{20, 150, 400, 3200, 7000, 22000}, const float sampleRate=44100);
    std::vector<float> BinaryOperator(std::vector<float>& input_array1, std::vector<float>& input_array2, const std::string& type="add");
    std::vector<float> BinaryOperatorStream(std::vector<float>& input_array1, std::vector<float>& input_array2, const std::string& type="add");
    void BpmHistogram(std::vector<float>& input_novelty, float output_bpm, std::vector<float>& output_bpmCandidates, std::vector<float>& output_bpmMagnitudes, std::vector<float>& output_tempogram, std::vector<float>& output_frameBpms, std::vector<float>& output_ticks, std::vector<float>& output_ticksMagnitude, std::vector<float>& output_sinusoid, const float bpm=0, const bool constantTempo=false, const float frameRate=86.1328, const float frameSize=4, const float maxBpm=560, const int maxPeaks=50, const float minBpm=30, const int overlap=16, const float tempoChange=5, const bool weightByMagnitude=true, const std::string& windowType="hann", const int zeroPadding=0);
    void BpmHistogramDescriptors(std::vector<float>& input_bpmIntervals, float output_firstPeakBPM, float output_firstPeakWeight, float output_firstPeakSpread, float output_secondPeakBPM, float output_secondPeakWeight, float output_secondPeakSpread, std::vector<float>& output_histogram);
    void BpmRubato(std::vector<float>& input_beats, std::vector<float>& output_rubatoStart, std::vector<float>& output_rubatoStop, int output_rubatoNumber, const float longRegionsPruningTime=20, const float shortRegionsMergingTime=4, const float tolerance=0.08);
    void CartesianToPolar(std::vector<float>& input_complex, std::vector<float>& output_magnitude, std::vector<float>& output_phase);
    std::vector<float> CentralMoments(std::vector<float>& input_array, const std::string& mode="pdf", const float range=1);
    float Centroid(std::vector<float>& input_array, const float range=1);
    void ChordsDescriptors(std::vector<std::string> input_chords, std::string input_key, std::string input_scale, std::vector<float>& output_chordsHistogram, float output_chordsNumberRate, float output_chordsChangesRate, std::string output_chordsKey, std::string output_chordsScale);
    void ChordsDetection(std::vector<std::vector<float> >& input_pcp, std::vector<std::string> output_chords, std::vector<float>& output_strength, const int hopSize=2048, const float sampleRate=44100, const float windowSize=2);
    void ChordsDetectionBeats(std::vector<std::vector<float> >& input_pcp, std::vector<float>& input_ticks, std::vector<std::string> output_chords, std::vector<float>& output_strength, const std::string& chromaPick="interbeat_median", const int hopSize=2048, const float sampleRate=44100);
    std::vector<std::vector<float> > ChromaCrossSimilarity(std::vector<std::vector<float> >& input_queryFeature, std::vector<std::vector<float> >& input_referenceFeature, const float binarizePercentile=0.095, const int frameStackSize=9, const int frameStackStride=1, const int noti=12, const bool oti=true, const bool otiBinary=false, const bool streaming=false);
    std::vector<float> Chromagram(std::vector<float>& input_frame, const int binsPerOctave=12, const float minFrequency=32.7, const int minimumKernelSize=4, const std::string& normalizeType="unit_max", const int numberBins=84, const float sampleRate=44100, const float scale=1, const float threshold=0.01, const std::string& windowType="hann", const bool zeroPhase=true);
    std::string Chromaprinter(std::vector<float>& input_signal, const float maxLength=0, const float sampleRate=44100);
    void ClickDetector(std::vector<float>& input_frame, std::vector<float>& output_starts, std::vector<float>& output_ends, const float detectionThreshold=30, const int frameSize=512, const int hopSize=256, const int order=12, const int powerEstimationThreshold=10, const float sampleRate=44100, const int silenceThreshold=-50);
    std::vector<float> Clipper(std::vector<float>& input_signal, const float max=1, const float min=-1);
    std::vector<float> ConstantQ(std::vector<float>& input_frame, const int binsPerOctave=12, const float minFrequency=32.7, const int minimumKernelSize=4, const int numberBins=84, const float sampleRate=44100, const float scale=1, const float threshold=0.01, const std::string& windowType="hann", const bool zeroPhase=true);
    void CoverSongSimilarity(std::vector<std::vector<float> >& input_inputArray, std::vector<std::vector<float> >& output_scoreMatrix, float output_distance, const std::string& alignmentType="serra09", const float disExtension=0.5, const float disOnset=0.5, const std::string& distanceType="asymmetric");
    float Crest(std::vector<float>& input_array);
    std::vector<float> CrossCorrelation(std::vector<float>& input_arrayX, std::vector<float>& input_arrayY, const int maxLag=1, const int minLag=0);
    std::vector<std::vector<float> > CrossSimilarityMatrix(std::vector<std::vector<float> >& input_queryFeature, std::vector<std::vector<float> >& input_referenceFeature, const bool binarize=false, const float binarizePercentile=0.095, const int frameStackSize=1, const int frameStackStride=1);
    void CubicSpline(float input_x, float output_y, float output_dy, float output_ddy, const int leftBoundaryFlag=0, const float leftBoundaryValue=0, const int rightBoundaryFlag=0, const float rightBoundaryValue=0, const std::vector<float>& xPoints=std::vector<float>{0, 1}, const std::vector<float>& yPoints=std::vector<float>{0, 1});
    std::vector<float> DCRemoval(std::vector<float>& input_signal, const float cutoffFrequency=40, const float sampleRate=44100);
    std::vector<float> DCT(std::vector<float>& input_array, const int dctType=2, const int inputSize=10, const int liftering=0, const int outputSize=10);
    void Danceability(std::vector<float>& input_signal, float output_danceability, std::vector<float>& output_dfa, const float maxTau=8800, const float minTau=310, const float sampleRate=44100, const float tauMultiplier=1.1);
    float Decrease(std::vector<float>& input_array, const float range=1);
    std::vector<float> Derivative(std::vector<float>& input_signal);
    void DerivativeSFX(std::vector<float>& input_envelope, float output_derAvAfterMax, float output_maxDerBeforeMax);
    void DiscontinuityDetector(std::vector<float>& input_frame, std::vector<float>& output_discontinuityLocations, std::vector<float>& output_discontinuityAmplitudes, const float detectionThreshold=8, const float energyThreshold=-60, const int frameSize=512, const int hopSize=256, const int kernelSize=7, const int order=3, const int silenceThreshold=-50, const int subFrameSize=32);
    float Dissonance(std::vector<float>& input_frequencies, std::vector<float>& input_magnitudes);
    void DistributionShape(std::vector<float>& input_centralMoments, float output_spread, float output_skewness, float output_kurtosis);
    float Duration(std::vector<float>& input_signal, const float sampleRate=44100);
    void DynamicComplexity(std::vector<float>& input_signal, float output_dynamicComplexity, float output_loudness, const float frameSize=0.2, const float sampleRate=44100);
    std::vector<float> ERBBands(std::vector<float>& input_spectrum, const float highFrequencyBound=22050, const int inputSize=1025, const float lowFrequencyBound=50, const int numberBands=40, const float sampleRate=44100, const std::string& type="power", const float width=1);
    float EffectiveDuration(std::vector<float>& input_signal, const float sampleRate=44100, const float thresholdRatio=0.4);
    float Energy(std::vector<float>& input_array);
    float EnergyBand(std::vector<float>& input_spectrum, const float sampleRate=44100, const float startCutoffFrequency=0, const float stopCutoffFrequency=100);
    float EnergyBandRatio(std::vector<float>& input_spectrum, const float sampleRate=44100, const float startFrequency=0, const float stopFrequency=100);
    float Entropy(std::vector<float>& input_array);
    std::vector<float> Envelope(std::vector<float>& input_signal, const bool applyRectification=true, const float attackTime=10, const float releaseTime=1500, const float sampleRate=44100);
    std::vector<float> EqualLoudness(std::vector<float>& input_signal, const float sampleRate=44100);
    std::vector<float> FFT(std::vector<float>& input_frame, const int size=1024);
    std::vector<float> FFTC(std::vector<float>& input_frame, const bool negativeFrequencies=false, const int size=1024);
    void FadeDetection(std::vector<float>& input_rms, std::vector<float>& output_fadeIn, std::vector<float>& output_fadeOut, const float cutoffHigh=0.85, const float cutoffLow=0.2, const float frameRate=4, const float minLength=3);
    void FalseStereoDetector(std::vector<std::vector<float> >& input_frame, int output_isFalseStereo, float output_correlation, const float correlationThreshold=0.9995, const int silenceThreshold=-70);
    float Flatness(std::vector<float>& input_array);
    float FlatnessDB(std::vector<float>& input_array);
    float FlatnessSFX(std::vector<float>& input_envelope);
    float Flux(std::vector<float>& input_spectrum, const bool halfRectify=false, const std::string& norm="L2");
    std::vector<float> FrameCutter(std::vector<float>& input_signal, const int frameSize=1024, const int hopSize=512, const bool lastFrameToEndOfFile=false, const bool startFromZero=false, const float validFrameThresholdRatio=0);
    std::vector<float> FrameToReal(std::vector<float>& input_signal, const int frameSize=2048, const int hopSize=128);
    std::vector<float> FrequencyBands(std::vector<float>& input_spectrum, const std::vector<float>& frequencyBands=std::vector<float>{0, 50, 100, 150, 200, 300, 400, 510, 630, 770, 920, 1080, 1270, 1480, 1720, 2000, 2320, 2700, 3150, 3700, 4400, 5300, 6400, 7700, 9500, 12000, 15500, 20500, 27000}, const float sampleRate=44100);
    void GFCC(std::vector<float>& input_spectrum, std::vector<float>& output_bands, std::vector<float>& output_gfcc, const int dctType=2, const float highFrequencyBound=22050, const int inputSize=1025, const std::string& logType="dbamp", const float lowFrequencyBound=40, const int numberBands=40, const int numberCoefficients=13, const float sampleRate=44100, const float silenceThreshold=1e-10, const std::string& type="power");
    void GapsDetector(std::vector<float>& input_frame, std::vector<float>& output_starts, std::vector<float>& output_ends, const float attackTime=0.05, const int frameSize=2048, const int hopSize=1024, const int kernelSize=11, const float maximumTime=3500, const float minimumTime=10, const float postpowerTime=40, const float prepowerThreshold=-30, const float prepowerTime=40, const float releaseTime=0.05, const float sampleRate=44100, const float silenceThreshold=-50);
    float GeometricMean(std::vector<float>& input_array);
    float HFC(std::vector<float>& input_spectrum, const float sampleRate=44100, const std::string& type="Masri");
    std::vector<float> HPCP(std::vector<float>& input_frequencies, std::vector<float>& input_magnitudes, const bool bandPreset=true, const float bandSplitFrequency=500, const int harmonics=0, const float maxFrequency=5000, const bool maxShifted=false, const float minFrequency=40, const bool nonLinear=false, const std::string& normalized="unitMax", const float referenceFrequency=440, const float sampleRate=44100, const int size=12, const std::string& weightType="squaredCosine", const float windowSize=1);
    std::vector<float> HarmonicBpm(std::vector<float>& input_bpms, const int bpm=60, const float threshold=20, const float tolerance=5);
    std::vector<float> HarmonicMask(std::vector<float>& input_fft, float input_pitch, const float attenuation=-200, const int binWidth=4, const float sampleRate=44100);
    void HarmonicModelAnal(std::vector<float>& input_fft, float input_pitch, std::vector<float>& output_frequencies, std::vector<float>& output_magnitudes, std::vector<float>& output_phases, const float freqDevOffset=20, const float freqDevSlope=0.01, const float harmDevSlope=0.01, const int hopSize=512, const float magnitudeThreshold=-74, const float maxFrequency=5000, const int maxPeaks=100, const int maxnSines=100, const float minFrequency=20, const int nHarmonics=100, const std::string& orderBy="frequency", const float sampleRate=44100);
    void HarmonicPeaks(std::vector<float>& input_frequencies, std::vector<float>& input_magnitudes, float input_pitch, std::vector<float>& output_harmonicFrequencies, std::vector<float>& output_harmonicMagnitudes, const int maxHarmonics=20, const float tolerance=0.2);
    std::vector<float> HighPass(std::vector<float>& input_signal, const float cutoffFrequency=1500, const float sampleRate=44100);
    void HighResolutionFeatures(std::vector<float>& input_hpcp, float output_equalTemperedDeviation, float output_nonTemperedEnergyRatio, float output_nonTemperedPeaksEnergyRatio, const int maxPeaks=24);
    void Histogram(std::vector<float>& input_array, std::vector<float>& output_histogram, std::vector<float>& output_binEdges, const float maxValue=1, const float minValue=0, const std::string& normalize="none", const int numberBins=10);
    void HprModelAnal(std::vector<float>& input_frame, float input_pitch, std::vector<float>& output_frequencies, std::vector<float>& output_magnitudes, std::vector<float>& output_phases, std::vector<float>& output_res, const int fftSize=2048, const int freqDevOffset=20, const float freqDevSlope=0.01, const float harmDevSlope=0.01, const int hopSize=512, const float magnitudeThreshold=0, const float maxFrequency=5000, const int maxPeaks=100, const int maxnSines=100, const float minFrequency=20, const int nHarmonics=100, const std::string& orderBy="frequency", const float sampleRate=44100, const float stocf=0.2);
    void HpsModelAnal(std::vector<float>& input_frame, float input_pitch, std::vector<float>& output_frequencies, std::vector<float>& output_magnitudes, std::vector<float>& output_phases, std::vector<float>& output_stocenv, const int fftSize=2048, const int freqDevOffset=20, const float freqDevSlope=0.01, const float harmDevSlope=0.01, const int hopSize=512, const float magnitudeThreshold=0, const float maxFrequency=5000, const int maxPeaks=100, const int maxnSines=100, const float minFrequency=20, const int nHarmonics=100, const std::string& orderBy="frequency", const float sampleRate=44100, const float stocf=0.2);
    void HumDetector(std::vector<float>& input_signal, std::vector<float>& output_r, std::vector<float>& output_frequencies, std::vector<float>& output_saliences, std::vector<float>& output_starts, std::vector<float>& output_ends, const float Q0=0.1, const float Q1=0.55, const float detectionThreshold=5, const float frameSize=0.4, const float hopSize=0.2, const float maximumFrequency=400, const float minimumDuration=2, const float minimumFrequency=22.5, const int numberHarmonics=1, const float sampleRate=44100, const float timeContinuity=10, const float timeWindow=10);
    std::vector<float> IDCT(std::vector<float>& input_dct, const int dctType=2, const int inputSize=10, const int liftering=0, const int outputSize=10);
    std::vector<float> IFFT(std::vector<float>& input_fft, const bool normalize=true, const int size=1024);
    std::vector<float> IFFTC(std::vector<float>& input_fft, const bool normalize=true, const int size=1024);
    std::vector<float> IIR(std::vector<float>& input_signal, const std::vector<float>& denominator=std::vector<float>{1}, const std::vector<float>& numerator=std::vector<float>{1});
    float Inharmonicity(std::vector<float>& input_frequencies, std::vector<float>& input_magnitudes);
    float InstantPower(std::vector<float>& input_array);
    int Intensity(std::vector<float>& input_signal, const float sampleRate=44100);
    void Key(std::vector<float>& input_pcp, std::string output_key, std::string output_scale, float output_strength, float output_firstToSecondRelativeStrength, const int numHarmonics=4, const int pcpSize=36, const std::string& profileType="bgate", const float slope=0.6, const bool useMajMin=false, const bool usePolyphony=true, const bool useThreeChords=true);
    void KeyExtractor(std::vector<float>& input_audio, std::string output_key, std::string output_scale, float output_strength, const bool averageDetuningCorrection=true, const int frameSize=4096, const int hopSize=4096, const int hpcpSize=12, const float maxFrequency=3500, const int maximumSpectralPeaks=60, const float minFrequency=25, const float pcpThreshold=0.2, const std::string& profileType="bgate", const float sampleRate=44100, const float spectralPeaksThreshold=0.0001, const float tuningFrequency=440, const std::string& weightType="cosine", const std::string& windowType="hann");
    void LPC(std::vector<float>& input_frame, std::vector<float>& output_lpc, std::vector<float>& output_reflection, const int order=10, const float sampleRate=44100, const std::string& type="regular");
    float Larm(std::vector<float>& input_signal, const float attackTime=10, const float power=1.5, const float releaseTime=1500, const float sampleRate=44100);
    float Leq(std::vector<float>& input_signal);
    std::vector<float> LevelExtractor(std::vector<float>& input_signal, const int frameSize=88200, const int hopSize=44100);
    void LogAttackTime(std::vector<float>& input_signal, float output_logAttackTime, float output_attackStart, float output_attackStop, const float sampleRate=44100, const float startAttackThreshold=0.2, const float stopAttackThreshold=0.9);
    void LogSpectrum(std::vector<float>& input_spectrum, std::vector<float>& output_logFreqSpectrum, std::vector<float>& output_meanTuning, float output_localTuning, const float binsPerSemitone=3, const int frameSize=1025, const float rollOn=0, const float sampleRate=44100);
    float LoopBpmConfidence(std::vector<float>& input_signal, float input_bpmEstimate, const float sampleRate=44100);
    float LoopBpmEstimator(std::vector<float>& input_signal, const float confidenceThreshold=0.95);
    float Loudness(std::vector<float>& input_signal);
    void LoudnessEBUR128(std::vector<std::vector<float> >& input_signal, std::vector<float>& output_momentaryLoudness, std::vector<float>& output_shortTermLoudness, float output_integratedLoudness, float output_loudnessRange, const float hopSize=0.1, const float sampleRate=44100, const bool startAtZero=false);
    float LoudnessVickers(std::vector<float>& input_signal, const float sampleRate=44100);
    void LowLevelSpectralEqloudExtractor(std::vector<float>& input_signal, std::vector<float>& output_dissonance, std::vector<std::vector<float> >& output_sccoeffs, std::vector<std::vector<float> >& output_scvalleys, std::vector<float>& output_spectral_centroid, std::vector<float>& output_spectral_kurtosis, std::vector<float>& output_spectral_skewness, std::vector<float>& output_spectral_spread, const int frameSize=2048, const int hopSize=1024, const float sampleRate=44100);
    void LowLevelSpectralExtractor(std::vector<float>& input_signal, std::vector<std::vector<float> >& output_barkbands, std::vector<float>& output_barkbands_kurtosis, std::vector<float>& output_barkbands_skewness, std::vector<float>& output_barkbands_spread, std::vector<float>& output_hfc, std::vector<std::vector<float> >& output_mfcc, std::vector<float>& output_pitch, std::vector<float>& output_pitch_instantaneous_confidence, std::vector<float>& output_pitch_salience, std::vector<float>& output_silence_rate_20dB, std::vector<float>& output_silence_rate_30dB, std::vector<float>& output_silence_rate_60dB, std::vector<float>& output_spectral_complexity, std::vector<float>& output_spectral_crest, std::vector<float>& output_spectral_decrease, std::vector<float>& output_spectral_energy, std::vector<float>& output_spectral_energyband_low, std::vector<float>& output_spectral_energyband_middle_low, std::vector<float>& output_spectral_energyband_middle_high, std::vector<float>& output_spectral_energyband_high, std::vector<float>& output_spectral_flatness_db, std::vector<float>& output_spectral_flux, std::vector<float>& output_spectral_rms, std::vector<float>& output_spectral_rolloff, std::vector<float>& output_spectral_strongpeak, std::vector<float>& output_zerocrossingrate, std::vector<float>& output_inharmonicity, std::vector<std::vector<float> >& output_tristimulus, std::vector<float>& output_oddtoevenharmonicenergyratio, const int frameSize=2048, const int hopSize=1024, const float sampleRate=44100);
    std::vector<float> LowPass(std::vector<float>& input_signal, const float cutoffFrequency=1500, const float sampleRate=44100);
    void MFCC(std::vector<float>& input_spectrum, std::vector<float>& output_bands, std::vector<float>& output_mfcc, const int dctType=2, const float highFrequencyBound=11000, const int inputSize=1025, const int liftering=0, const std::string& logType="dbamp", const float lowFrequencyBound=0, const std::string& normalize="unit_sum", const int numberBands=40, const int numberCoefficients=13, const float sampleRate=44100, const float silenceThreshold=1e-10, const std::string& type="power", const std::string& warpingFormula="htkMel", const std::string& weighting="warping");
    std::vector<float> Magnitude(std::vector<float>& input_complex);
    std::vector<float> MaxFilter(std::vector<float>& input_signal, const bool causal=true, const int width=3);
    float MaxMagFreq(std::vector<float>& input_spectrum, const float sampleRate=44100);
    float MaxToTotal(std::vector<float>& input_envelope);
    float Mean(std::vector<float>& input_array);
    float Median(std::vector<float>& input_array);
    std::vector<float> MedianFilter(std::vector<float>& input_array, const int kernelSize=11);
    std::vector<float> MelBands(std::vector<float>& input_spectrum, const float highFrequencyBound=22050, const int inputSize=1025, const bool log=false, const float lowFrequencyBound=0, const std::string& normalize="unit_sum", const int numberBands=24, const float sampleRate=44100, const std::string& type="power", const std::string& warpingFormula="htkMel", const std::string& weighting="warping");
    float Meter(std::vector<std::vector<float> >& input_beatogram);
    void MinMax(std::vector<float>& input_array, float output_real, int output_int, const std::string& type="min");
    float MinToTotal(std::vector<float>& input_envelope);
    std::vector<float> MovingAverage(std::vector<float>& input_signal, const int size=6);
    std::vector<std::vector<float> > Multiplexer(const int numberRealInputs=0, const int numberVectorRealInputs=0);
    void NNLSChroma(std::vector<std::vector<float> >& input_logSpectrogram, std::vector<float>& input_meanTuning, std::vector<float>& input_localTuning, std::vector<std::vector<float> >& output_tunedLogfreqSpectrum, std::vector<std::vector<float> >& output_semitoneSpectrum, std::vector<std::vector<float> >& output_bassChromagram, std::vector<std::vector<float> >& output_chromagram, const std::string& chromaNormalization="none", const int frameSize=1025, const float sampleRate=44100, const float spectralShape=0.7, const float spectralWhitening=1, const std::string& tuningMode="global", const bool useNNLS=true);
    void NSGConstantQ(std::vector<float>& input_frame, std::vector<std::vector<float> >& output_constantq, std::vector<float>& output_constantqdc, std::vector<float>& output_constantqnf, const int binsPerOctave=48, const int gamma=0, const int inputSize=4096, const float maxFrequency=7040, const float minFrequency=27.5, const int minimumWindow=4, const std::string& normalize="none", const std::string& phaseMode="global", const std::string& rasterize="full", const float sampleRate=44100, const std::string& window="hannnsgcq", const int windowSizeFactor=1);
    std::vector<float> NSGIConstantQ(std::vector<std::vector<float> >& input_constantq, std::vector<float>& input_constantqdc, std::vector<float>& input_constantqnf, const int binsPerOctave=48, const int gamma=0, const int inputSize=4096, const float maxFrequency=7040, const float minFrequency=27.5, const int minimumWindow=4, const std::string& normalize="none", const std::string& phaseMode="global", const std::string& rasterize="full", const float sampleRate=44100, const std::string& window="hannnsgcq", const int windowSizeFactor=1);
    std::vector<float> NoiseAdder(std::vector<float>& input_signal, const bool fixSeed=false, const int level=-100);
    std::vector<float> NoiseBurstDetector(std::vector<float>& input_frame, const float alpha=0.9, const int silenceThreshold=-50, const int threshold=8);
    std::vector<float> NoveltyCurve(std::vector<std::vector<float> >& input_frequencyBands, const float frameRate=344.531, const bool normalize=false, const std::vector<float>& weightCurve=std::vector<float>(), const std::string& weightCurveType="hybrid");
    void NoveltyCurveFixedBpmEstimator(std::vector<float>& input_novelty, std::vector<float>& output_bpms, std::vector<float>& output_amplitudes, const int hopSize=512, const float maxBpm=560, const float minBpm=30, const float sampleRate=44100, const float tolerance=3);
    float OddToEvenHarmonicEnergyRatio(std::vector<float>& input_frequencies, std::vector<float>& input_magnitudes);
    float OnsetDetection(std::vector<float>& input_spectrum, std::vector<float>& input_phase, const std::string& method="hfc", const float sampleRate=44100);
    std::vector<float> OnsetDetectionGlobal(std::vector<float>& input_signal, const int frameSize=2048, const int hopSize=512, const std::string& method="infogain", const float sampleRate=44100);
    void OnsetRate(std::vector<float>& input_signal, std::vector<float>& output_onsets, float output_onsetRate);
    std::vector<float> Onsets(std::vector<float>& input_detections, std::vector<float>& input_weights, const float alpha=0.1, const int delay=5, const float frameRate=86.1328, const float silenceThreshold=0.02);
    std::vector<float> OverlapAdd(std::vector<float>& input_signal, const int frameSize=2048, const float gain=1, const int hopSize=128);
    std::vector<float> Panning(std::vector<float>& input_spectrumLeft, std::vector<float>& input_spectrumRight, const int averageFrames=43, const int numBands=1, const int numCoeffs=20, const int panningBins=512, const float sampleRate=44100, const bool warpedPanorama=true);
    void PeakDetection(std::vector<float>& input_array, std::vector<float>& output_positions, std::vector<float>& output_amplitudes, const bool interpolate=true, const int maxPeaks=100, const float maxPosition=1, const float minPeakDistance=0, const float minPosition=0, const std::string& orderBy="position", const float range=1, const float threshold=-1e+06);
    float PercivalBpmEstimator(std::vector<float>& input_signal, const int frameSize=1024, const int frameSizeOSS=2048, const int hopSize=128, const int hopSizeOSS=128, const int maxBPM=210, const int minBPM=50, const int sampleRate=44100);
    std::vector<float> PercivalEnhanceHarmonics(std::vector<float>& input_array);
    float PercivalEvaluatePulseTrains(std::vector<float>& input_oss, std::vector<float>& input_positions);
    void PitchContourSegmentation(std::vector<float>& input_pitch, std::vector<float>& input_signal, std::vector<float>& output_onset, std::vector<float>& output_duration, std::vector<float>& output_MIDIpitch, const int hopSize=128, const float minDuration=0.1, const int pitchDistanceThreshold=60, const int rmsThreshold=-2, const int sampleRate=44100, const int tuningFrequency=440);
    void PitchContours(std::vector<std::vector<float> >& input_peakBins, std::vector<std::vector<float> >& input_peakSaliences, std::vector<std::vector<float> >& output_contoursBins, std::vector<std::vector<float> >& output_contoursSaliences, std::vector<float>& output_contoursStartTimes, float output_duration, const float binResolution=10, const int hopSize=128, const float minDuration=100, const float peakDistributionThreshold=0.9, const float peakFrameThreshold=0.9, const float pitchContinuity=27.5625, const float sampleRate=44100, const float timeContinuity=100);
    void PitchContoursMelody(std::vector<std::vector<float> >& input_contoursBins, std::vector<std::vector<float> >& input_contoursSaliences, std::vector<float>& input_contoursStartTimes, float input_duration, std::vector<float>& output_pitch, std::vector<float>& output_pitchConfidence, const float binResolution=10, const int filterIterations=3, const bool guessUnvoiced=false, const int hopSize=128, const float maxFrequency=20000, const float minFrequency=80, const float referenceFrequency=55, const float sampleRate=44100, const bool voiceVibrato=false, const float voicingTolerance=0.2);
    void PitchContoursMonoMelody(std::vector<std::vector<float> >& input_contoursBins, std::vector<std::vector<float> >& input_contoursSaliences, std::vector<float>& input_contoursStartTimes, float input_duration, std::vector<float>& output_pitch, std::vector<float>& output_pitchConfidence, const float binResolution=10, const int filterIterations=3, const bool guessUnvoiced=false, const int hopSize=128, const float maxFrequency=20000, const float minFrequency=80, const float referenceFrequency=55, const float sampleRate=44100);
    std::vector<std::vector<float> > PitchContoursMultiMelody(std::vector<std::vector<float> >& input_contoursBins, std::vector<std::vector<float> >& input_contoursSaliences, std::vector<float>& input_contoursStartTimes, float input_duration, const float binResolution=10, const int filterIterations=3, const bool guessUnvoiced=false, const int hopSize=128, const float maxFrequency=20000, const float minFrequency=80, const float referenceFrequency=55, const float sampleRate=44100);
    std::vector<float> PitchFilter(std::vector<float>& input_pitch, std::vector<float>& input_pitchConfidence, const int confidenceThreshold=36, const int minChunkSize=30, const bool useAbsolutePitchConfidence=false);
    float PitchSalience(std::vector<float>& input_spectrum, const float highBoundary=5000, const float lowBoundary=100, const float sampleRate=44100);
    std::vector<float> PitchSalienceFunction(std::vector<float>& input_frequencies, std::vector<float>& input_magnitudes, const float binResolution=10, const float harmonicWeight=0.8, const float magnitudeCompression=1, const float magnitudeThreshold=40, const int numberHarmonics=20, const float referenceFrequency=55);
    void PitchSalienceFunctionPeaks(std::vector<float>& input_salienceFunction, std::vector<float>& output_salienceBins, std::vector<float>& output_salienceValues, const float binResolution=10, const float maxFrequency=1760, const float minFrequency=55, const float referenceFrequency=55);
    void PitchYin(std::vector<float>& input_signal, float output_pitch, float output_pitchConfidence, const int frameSize=2048, const bool interpolate=true, const float maxFrequency=22050, const float minFrequency=20, const float sampleRate=44100, const float tolerance=0.15);
    void PitchYinFFT(std::vector<float>& input_spectrum, float output_pitch, float output_pitchConfidence, const int frameSize=2048, const bool interpolate=true, const float maxFrequency=22050, const float minFrequency=20, const float sampleRate=44100, const float tolerance=1);
    void PitchYinProbabilistic(std::vector<float>& input_signal, std::vector<float>& output_pitch, std::vector<float>& output_voicedProbabilities, const int frameSize=2048, const int hopSize=256, const float lowRMSThreshold=0.1, const std::string& outputUnvoiced="negative", const bool preciseTime=false, const float sampleRate=44100);
    void PitchYinProbabilities(std::vector<float>& input_signal, std::vector<float>& output_pitch, std::vector<float>& output_probabilities, float output_RMS, const int frameSize=2048, const float lowAmp=0.1, const bool preciseTime=false, const float sampleRate=44100);
    std::vector<float> PitchYinProbabilitiesHMM(std::vector<std::vector<float> >& input_pitchCandidates, std::vector<std::vector<float> >& input_probabilities, const float minFrequency=61.735, const int numberBinsPerSemitone=5, const float selfTransition=0.99, const float yinTrust=0.5);
    std::vector<float> PolarToCartesian(std::vector<float>& input_magnitude, std::vector<float>& input_phase);
    float PowerMean(std::vector<float>& input_array, const float power=1);
    std::vector<float> PowerSpectrum(std::vector<float>& input_signal, const int size=2048);
    float RMS(std::vector<float>& input_array);
    std::vector<float> RawMoments(std::vector<float>& input_array, const float range=22050);
    float ReplayGain(std::vector<float>& input_signal, const float sampleRate=44100);
    std::vector<float> ResampleFFT(std::vector<float>& input_input, const int inSize=128, const int outSize=128);
    void RhythmDescriptors(std::vector<float>& input_signal, std::vector<float>& output_beats_position, float output_confidence, float output_bpm, std::vector<float>& output_bpm_estimates, std::vector<float>& output_bpm_intervals, float output_first_peak_bpm, float output_first_peak_spread, float output_first_peak_weight, float output_second_peak_bpm, float output_second_peak_spread, float output_second_peak_weight, std::vector<float>& output_histogram);
    void RhythmExtractor(std::vector<float>& input_signal, float output_bpm, std::vector<float>& output_ticks, std::vector<float>& output_estimates, std::vector<float>& output_bpmIntervals, const int frameHop=1024, const int frameSize=1024, const int hopSize=256, const float lastBeatInterval=0.1, const int maxTempo=208, const int minTempo=40, const int numberFrames=1024, const float sampleRate=44100, const std::vector<float>& tempoHints=std::vector<float>(), const float tolerance=0.24, const bool useBands=true, const bool useOnset=true);
    void RhythmExtractor2013(std::vector<float>& input_signal, float output_bpm, std::vector<float>& output_ticks, float output_confidence, std::vector<float>& output_estimates, std::vector<float>& output_bpmIntervals, const int maxTempo=208, const std::string& method="multifeature", const int minTempo=40);
    std::vector<std::vector<float> > RhythmTransform(std::vector<std::vector<float> >& input_melBands, const int frameSize=256, const int hopSize=32);
    float RollOff(std::vector<float>& input_spectrum, const float cutoff=0.85, const float sampleRate=44100);
    std::vector<float> SBic(std::vector<float>& input_features, const float cpw=1.5, const int inc1=60, const int inc2=20, const int minLength=10, const int size1=300, const int size2=200);
    void SNR(std::vector<float>& input_frame, float output_instantSNR, float output_averagedSNR, std::vector<float>& output_spectralSNR, const float MAAlpha=0.95, const float MMSEAlpha=0.98, const float NoiseAlpha=0.9, const int frameSize=512, const float noiseThreshold=-40, const float sampleRate=44100, const bool useBroadbadNoiseCorrection=true);
    void SaturationDetector(std::vector<float>& input_frame, std::vector<float>& output_starts, std::vector<float>& output_ends, const float differentialThreshold=0.001, const float energyThreshold=-1, const int frameSize=512, const int hopSize=256, const float minimumDuration=0.005, const float sampleRate=44100);
    std::vector<float> Scale(std::vector<float>& input_signal, const bool clipping=true, const float factor=10, const float maxAbsValue=1);
    void SineModelAnal(std::vector<float>& input_fft, std::vector<float>& output_frequencies, std::vector<float>& output_magnitudes, std::vector<float>& output_phases, const float freqDevOffset=20, const float freqDevSlope=0.01, const float magnitudeThreshold=-74, const float maxFrequency=22050, const int maxPeaks=250, const int maxnSines=100, const float minFrequency=0, const std::string& orderBy="frequency", const float sampleRate=44100);
    std::vector<float> SineModelSynth(std::vector<float>& input_magnitudes, std::vector<float>& input_frequencies, std::vector<float>& input_phases, const int fftSize=2048, const int hopSize=512, const float sampleRate=44100);
    std::vector<float> SineSubtraction(std::vector<float>& input_frame, std::vector<float>& input_magnitudes, std::vector<float>& input_frequencies, std::vector<float>& input_phases, const int fftSize=512, const int hopSize=128, const float sampleRate=44100);
    void SingleBeatLoudness(std::vector<float>& input_beat, float output_loudness, std::vector<float>& output_loudnessBandRatio, const float beatDuration=0.05, const float beatWindowDuration=0.1, const std::vector<float>& frequencyBands=std::vector<float>{0, 200, 400, 800, 1600, 3200, 22000}, const std::string& onsetStart="sumEnergy", const float sampleRate=44100);
    void SingleGaussian(std::vector<float>& input_matrix, std::vector<float>& output_mean, std::vector<float>& output_covariance, std::vector<float>& output_inverseCovariance);
    std::vector<std::vector<float> > Slicer(std::vector<float>& input_audio, const std::vector<float>& endTimes=std::vector<float>(), const float sampleRate=44100, const std::vector<float>& startTimes=std::vector<float>(), const std::string& timeUnits="seconds");
    float SpectralCentroidTime(std::vector<float>& input_array, const float sampleRate=44100);
    float SpectralComplexity(std::vector<float>& input_spectrum, const float magnitudeThreshold=0.005, const float sampleRate=44100);
    void SpectralContrast(std::vector<float>& input_spectrum, std::vector<float>& output_spectralContrast, std::vector<float>& output_spectralValley, const int frameSize=2048, const float highFrequencyBound=11000, const float lowFrequencyBound=20, const float neighbourRatio=0.4, const int numberBands=6, const float sampleRate=22050, const float staticDistribution=0.15);
    void SpectralPeaks(std::vector<float>& input_spectrum, std::vector<float>& output_frequencies, std::vector<float>& output_magnitudes, const float magnitudeThreshold=0, const float maxFrequency=5000, const int maxPeaks=100, const float minFrequency=0, const std::string& orderBy="frequency", const float sampleRate=44100);
    std::vector<float> SpectralWhitening(std::vector<float>& input_spectrum, std::vector<float>& input_frequencies, std::vector<float>& input_magnitudes, const float maxFrequency=5000, const float sampleRate=44100);
    std::vector<float> Spectrum(std::vector<float>& input_frame, const int size=2048);
    std::vector<float> SpectrumCQ(std::vector<float>& input_frame, const int binsPerOctave=12, const float minFrequency=32.7, const int minimumKernelSize=4, const int numberBins=84, const float sampleRate=44100, const float scale=1, const float threshold=0.01, const std::string& windowType="hann", const bool zeroPhase=true);
    void SpectrumToCent(std::vector<float>& input_spectrum, std::vector<float>& output_bands, std::vector<float>& output_frequencies, const int bands=720, const float centBinResolution=10, const int inputSize=32768, const bool log=true, const float minimumFrequency=164, const std::string& normalize="unit_sum", const float sampleRate=44100, const std::string& type="power");
    float Spline(float input_x, const float beta1=1, const float beta2=0, const std::string& type="b", const std::vector<float>& xPoints=std::vector<float>{0, 1}, const std::vector<float>& yPoints=std::vector<float>{0, 1});
    void SprModelAnal(std::vector<float>& input_frame, std::vector<float>& output_frequencies, std::vector<float>& output_magnitudes, std::vector<float>& output_phases, std::vector<float>& output_res, const int fftSize=2048, const int freqDevOffset=20, const float freqDevSlope=0.01, const int hopSize=512, const float magnitudeThreshold=0, const float maxFrequency=5000, const int maxPeaks=100, const int maxnSines=100, const float minFrequency=0, const std::string& orderBy="frequency", const float sampleRate=44100);
    void SprModelSynth(std::vector<float>& input_magnitudes, std::vector<float>& input_frequencies, std::vector<float>& input_phases, std::vector<float>& input_res, std::vector<float>& output_frame, std::vector<float>& output_sineframe, std::vector<float>& output_resframe, const int fftSize=2048, const int hopSize=512, const float sampleRate=44100);
    void SpsModelAnal(std::vector<float>& input_frame, std::vector<float>& output_frequencies, std::vector<float>& output_magnitudes, std::vector<float>& output_phases, std::vector<float>& output_stocenv, const int fftSize=2048, const int freqDevOffset=20, const float freqDevSlope=0.01, const int hopSize=512, const float magnitudeThreshold=0, const float maxFrequency=5000, const int maxPeaks=100, const int maxnSines=100, const float minFrequency=0, const std::string& orderBy="frequency", const float sampleRate=44100, const float stocf=0.2);
    void SpsModelSynth(std::vector<float>& input_magnitudes, std::vector<float>& input_frequencies, std::vector<float>& input_phases, std::vector<float>& input_stocenv, std::vector<float>& output_frame, std::vector<float>& output_sineframe, std::vector<float>& output_stocframe, const int fftSize=2048, const int hopSize=512, const float sampleRate=44100, const float stocf=0.2);
    void StartStopCut(std::vector<float>& input_audio, int output_startCut, int output_stopCut, const int frameSize=256, const int hopSize=256, const float maximumStartTime=10, const float maximumStopTime=10, const float sampleRate=44100, const int threshold=-60);
    void StartStopSilence(std::vector<float>& input_frame, int output_startFrame, int output_stopFrame, const int threshold=-60);
    void StereoDemuxer(std::vector<std::vector<float> >& input_audio, std::vector<float>& output_left, std::vector<float>& output_right);
    std::vector<std::vector<float> > StereoMuxer(std::vector<float>& input_left, std::vector<float>& input_right);
    std::vector<std::vector<float> > StereoTrimmer(std::vector<std::vector<float> >& input_signal, const bool checkRange=false, const float endTime=1e+06, const float sampleRate=44100, const float startTime=0);
    std::vector<float> StochasticModelAnal(std::vector<float>& input_frame, const int fftSize=2048, const int hopSize=512, const float sampleRate=44100, const float stocf=0.2);
    std::vector<float> StochasticModelSynth(std::vector<float>& input_stocenv, const int fftSize=2048, const int hopSize=512, const float sampleRate=44100, const float stocf=0.2);
    float StrongDecay(std::vector<float>& input_signal, const float sampleRate=44100);
    float StrongPeak(std::vector<float>& input_spectrum);
    std::vector<float> SuperFluxExtractor(std::vector<float>& input_signal, const float combine=20, const int frameSize=2048, const int hopSize=256, const float ratioThreshold=16, const float sampleRate=44100, const float threshold=0.05);
    float SuperFluxNovelty(std::vector<std::vector<float> >& input_bands, const int binWidth=3, const int frameWidth=2);
    std::vector<float> SuperFluxPeaks(std::vector<float>& input_novelty, const float combine=30, const float frameRate=172, const float pre_avg=100, const float pre_max=30, const float ratioThreshold=16, const float threshold=0.05);
    float TCToTotal(std::vector<float>& input_envelope);
    void TempoScaleBands(std::vector<float>& input_bands, std::vector<float>& output_scaledBands, float output_cumulativeBands, const std::vector<float>& bandsGain=std::vector<float>{2, 3, 2, 1, 1.20000004768, 2, 3, 2.5}, const float frameTime=512);
    void TempoTap(std::vector<float>& input_featuresFrame, std::vector<float>& output_periods, std::vector<float>& output_phases, const int frameHop=1024, const int frameSize=256, const int maxTempo=208, const int minTempo=40, const int numberFrames=1024, const float sampleRate=44100, const std::vector<float>& tempoHints=std::vector<float>());
    std::vector<float> TempoTapDegara(std::vector<float>& input_onsetDetections, const int maxTempo=208, const int minTempo=40, const std::string& resample="none", const float sampleRateODF=86.1328);
    void TempoTapMaxAgreement(std::vector<std::vector<float> >& input_tickCandidates, std::vector<float>& output_ticks, float output_confidence);
    void TempoTapTicks(std::vector<float>& input_periods, std::vector<float>& input_phases, std::vector<float>& output_ticks, std::vector<float>& output_matchingPeriods, const int frameHop=512, const int hopSize=256, const float sampleRate=44100);
    std::vector<float> TensorflowInputMusiCNN(std::vector<float>& input_frame);
    std::vector<float> TensorflowInputVGGish(std::vector<float>& input_frame);
    void TonalExtractor(std::vector<float>& input_signal, float output_chords_changes_rate, std::vector<float>& output_chords_histogram, std::string output_chords_key, float output_chords_number_rate, std::vector<std::string> output_chords_progression, std::string output_chords_scale, std::vector<float>& output_chords_strength, std::vector<std::vector<float> >& output_hpcp, std::vector<std::vector<float> >& output_hpcp_highres, std::string output_key_key, std::string output_key_scale, float output_key_strength, const int frameSize=4096, const int hopSize=2048, const float tuningFrequency=440);
    float TonicIndianArtMusic(std::vector<float>& input_signal, const float binResolution=10, const int frameSize=2048, const float harmonicWeight=0.85, const int hopSize=512, const float magnitudeCompression=1, const float magnitudeThreshold=40, const float maxTonicFrequency=375, const float minTonicFrequency=100, const int numberHarmonics=20, const int numberSaliencePeaks=5, const float referenceFrequency=55, const float sampleRate=44100);
    std::vector<float> TriangularBands(std::vector<float>& input_spectrum, const std::vector<float>& frequencyBands=std::vector<float>{21.533203125, 43.06640625, 64.599609375, 86.1328125, 107.666015625, 129.19921875, 150.732421875, 172.265625, 193.798828125, 215.33203125, 236.865234375, 258.3984375, 279.931640625, 301.46484375, 322.998046875, 344.53125, 366.064453125, 387.59765625, 409.130859375, 430.6640625, 452.197265625, 473.73046875, 495.263671875, 516.796875, 538.330078125, 559.86328125, 581.396484375, 602.9296875, 624.462890625, 645.99609375, 667.529296875, 689.0625, 710.595703125, 732.12890625, 753.662109375, 775.1953125, 796.728515625, 839.794921875, 861.328125, 882.861328125, 904.39453125, 925.927734375, 968.994140625, 990.52734375, 1012.06054688, 1055.12695312, 1076.66015625, 1098.19335938, 1141.25976562, 1184.32617188, 1205.859375, 1248.92578125, 1270.45898438, 1313.52539062, 1356.59179688, 1399.65820312, 1442.72460938, 1485.79101562, 1528.85742188, 1571.92382812, 1614.99023438, 1658.05664062, 1701.12304688, 1765.72265625, 1808.7890625, 1873.38867188, 1916.45507812, 1981.0546875, 2024.12109375, 2088.72070312, 2153.3203125, 2217.91992188, 2282.51953125, 2347.11914062, 2411.71875, 2497.8515625, 2562.45117188, 2627.05078125, 2713.18359375, 2799.31640625, 2885.44921875, 2950.04882812, 3036.18164062, 3143.84765625, 3229.98046875, 3316.11328125, 3423.77929688, 3509.91210938, 3617.578125, 3725.24414062, 3832.91015625, 3940.57617188, 4069.77539062, 4177.44140625, 4306.640625, 4435.83984375, 4565.0390625, 4694.23828125, 4844.97070312, 4974.16992188, 5124.90234375, 5275.63476562, 5426.3671875, 5577.09960938, 5749.36523438, 5921.63085938, 6093.89648438, 6266.16210938, 6459.9609375, 6653.75976562, 6847.55859375, 7041.35742188, 7256.68945312, 7450.48828125, 7687.35351562, 7902.68554688, 8139.55078125, 8376.41601562, 8613.28125, 8871.6796875, 9130.078125, 9388.4765625, 9668.40820312, 9948.33984375, 10249.8046875, 10551.2695312, 10852.734375, 11175.7324219, 11498.7304688, 11843.2617188, 12187.7929688, 12553.8574219, 12919.921875, 13285.9863281, 13673.5839844, 14082.7148438, 14491.8457031, 14922.5097656, 15353.1738281, 15805.3710938, 16257.5683594}, const int inputSize=1025, const bool log=true, const std::string& normalize="unit_sum", const float sampleRate=44100, const std::string& type="power", const std::string& weighting="linear");
    std::vector<float> TriangularBarkBands(std::vector<float>& input_spectrum, const float highFrequencyBound=22050, const int inputSize=1025, const bool log=false, const float lowFrequencyBound=0, const std::string& normalize="unit_sum", const int numberBands=24, const float sampleRate=44100, const std::string& type="power", const std::string& weighting="warping");
    std::vector<float> Trimmer(std::vector<float>& input_signal, const bool checkRange=false, const float endTime=1e+06, const float sampleRate=44100, const float startTime=0);
    std::vector<float> Tristimulus(std::vector<float>& input_frequencies, std::vector<float>& input_magnitudes);
    void TruePeakDetector(std::vector<float>& input_signal, std::vector<float>& output_peakLocations, std::vector<float>& output_output, const bool blockDC=false, const bool emphasise=false, const int oversamplingFactor=4, const int quality=1, const float sampleRate=44100, const float threshold=-0.0002, const int version=4);
    void TuningFrequency(std::vector<float>& input_frequencies, std::vector<float>& input_magnitudes, float output_tuningFrequency, float output_tuningCents, const float resolution=1);
    std::vector<float> TuningFrequencyExtractor(std::vector<float>& input_signal, const int frameSize=4096, const int hopSize=2048);
    std::vector<float> UnaryOperator(std::vector<float>& input_array, const float scale=1, const float shift=0, const std::string& type="identity");
    std::vector<float> UnaryOperatorStream(std::vector<float>& input_array, const float scale=1, const float shift=0, const std::string& type="identity");
    float Variance(std::vector<float>& input_array);
    void Vibrato(std::vector<float>& input_pitch, std::vector<float>& output_vibratoFrequency, std::vector<float>& output_vibratoExtend, const float maxExtend=250, const float maxFrequency=8, const float minExtend=50, const float minFrequency=4, const float sampleRate=344.531);
    std::vector<float> WarpedAutoCorrelation(std::vector<float>& input_array, const int maxLag=1, const float sampleRate=44100);
    std::vector<float> Welch(std::vector<float>& input_frame, const int averagingFrames=10, const int fftSize=1024, const int frameSize=512, const float sampleRate=44100, const std::string& scaling="density", const std::string& windowType="hann");
    std::vector<float> Windowing(std::vector<float>& input_frame, const bool normalized=true, const int size=1024, const std::string& type="hann", const int zeroPadding=0, const bool zeroPhase=true);
    float ZeroCrossingRate(std::vector<float>& input_signal, const float threshold=0);
};

#endif  // ESSENTIAJS_H