/*
 * Copyright (C) 2006-2020  Music Technology Group - Universitat Pompeu Fabra
 *
 * This file is part of Essentia
 *
 * Essentia is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation (FSF), either version 3 of the License, or (at your
 * option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the Affero GNU General Public License
 * version 3 along with this program.  If not, see http://www.gnu.org/licenses/
 */

// NOTE: The following code snippets are machine generated. Do not edit.

/**
 * @fileOverview Essentia high-level core interface
 * @author <a href="mailto:albin.correya@upf.edu">Albin Correya</a>
 * @version 0.0.9
 */

/**
 * essentia.js-core JS API
 * @class 
 * @example
 * const essentia = new Essentia(EssentiaModule)
 */
class Essentia {
  /** 
  * @property {EssentiaEmscriptenModule} this.module Essentia emcripten global module object 
  * @property {string} this.version Essentia WASM backend version
  * @property {string} this.algorithmNames List of available Essentia alogrithms from the WASM backend
  */
  private algorithms: any;
  public module: any;
  public version: string;
  public algorithmNames: string;

  /**  
  * @constructs
  * @param {EssentiaEmscriptenModule} EssentiaModule Essentia emcripten global module object which is loaded from 'essentia-wasm.*.js file'
  * @param {boolean} [isDebug=false]
  */
  constructor(public EssentiaModule: any, public isDebug: boolean=false) {
    this.algorithms = new EssentiaModule.EssentiaJS(isDebug);
    this.module = EssentiaModule;
    this.version = this.algorithms.version;
    this.algorithmNames = this.algorithms.algorithmNames;
  }

  /**
   * Decode and returns the audio channel data from an given audio url or blob uri using Web Audio API. (NOTE: only works on modern web-browsers)
   * @async
   * @method
   * @param {string} audioURL web url or blob uri of a audio file
   * @param {AudioContext} webAudioCtx an instance of Web Audio API `AudioContext`
   * @param {number} [channel=0] audio channel number
   * @returns {Float32Array} decode and returns the audio data as Float32 array for the given channel
   * @memberof Essentia
   */
  async getAudioChannelDataFromURL(audioURL: string, webAudioCtx: AudioContext, channel: number=0) {
    const response = await fetch(audioURL);
    const arrayBuffer = await response.arrayBuffer();
    const audioBuffer = await webAudioCtx.decodeAudioData(arrayBuffer);
    return audioBuffer.getChannelData(channel);
  }

  /**
   * Method to shutdown essentia algorithm instance after it's use
   * @method
   * @memberof Essentia
   */
  shutdown() {
    this.algorithms.shutdown();
  }

  /**
   * Method for re-instantiating essentia algorithms instance after using the shutdown method
   * @method
   * @memberof Essentia
   */
  reinstantiate() {
    this.algorithms = new this.module.EssentiaJS(this.isDebug);
  }

  /**
   * Convert an input JS array into VectorFloat type
   * @method
   * @param {Float32Array} inputArray input JS typed array
   * @returns {VectorFloat} returns vector float
   * @memberof Essentia
   */
  arrayToVector(inputArray: any) {
    return this.module.arrayToVector(inputArray);
  }

  /**
   * Convert an input VectorFloat array into typed JS Float32Array 
   * @method 
   * @param {VectorFloat} inputVector input VectorFloat array
   * @returns {Float32Array} returns converted JS typed array
   * @memberof Essentia
   */
  vectorToArray(inputVector: any) {
    return this.module.vectorToArray(inputVector);
  }

  /**
   * Cuts an audio signal data into overlapping frames given frame size and hop size 
   * @method
   * @param {Float32Array} inputAudioData a single channel audio channel data
   * @param {number} [frameSize=2048] frame size for cutting the audio signal
   * @param {number} [hopSize=1024] size of overlapping frame 
   * @returns {VectorVectorFloat} Returns a 2D vector float of sliced audio frames 
   * @memberof Essentia
   */
  FrameGenerator(inputAudioData: Float32Array, frameSize: number=2048, hopSize: number=1024) {
    return this.algorithms.FrameGenerator(inputAudioData, frameSize, hopSize);
  }

  /**
  * This algorithm computes the EBU R128 loudness descriptors of an audio signal. Check https://essentia.upf.edu/reference/std_LoudnessEBUR128.html for more details.
  * @method
  * @param {VectorFloat} leftChannel the left channel of the stereo audio signal
  * @param {VectorFloat} rightChannel the right channel of the stereo audio signal
  * @param {number} [hopSize=0.1] the hop size with which the loudness is computed [s]
  * @param {number} [sampleRate=44100] the sampling rate of the audio signal [Hz]
  * @param {boolean} [startAtZero=false] start momentary/short-term loudness estimation at time 0 (zero-centered loudness estimation windows) if true; otherwise start both windows at time 0 (time positions for momentary and short-term values will not be syncronized)
  * @returns {object} {momentaryLoudness: 'momentary loudness (over 400ms) (LUFS)', shortTermLoudness: 'short-term loudness (over 3 seconds) (LUFS)', integratedLoudness: 'integrated loudness (overall) (LUFS)', loudnessRange: 'loudness range over an arbitrary long time interval [3] (dB, LU)'}
  * @memberof Essentia
  */
  LoudnessEBUR128(leftSignal: any, rightSignal: any, hopSize: number=0.1, sampleRate: number=44100, startAtZero: boolean=false) {
    return this.algorithms.LoudnessEBUR128(leftSignal, rightSignal, hopSize, sampleRate, startAtZero);
  }

  // NOTE: The following code snippets are machine generated. Do not edit.
  /*[[[cog
  import cog
  from .code_generator import generate_typescript_wrapper
  algos = generate_typescript_wrapper()
  for algo in algos:
    for ln in algo:
      cog.outl(ln)
    cog.outl(' ')
  ]]]*/
  //[[[end]]]

}

/*
@exports
*/
export default Essentia;