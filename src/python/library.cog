/*
 * Copyright (C) 2006-2020  Music Technology Group - Universitat Pompeu Fabra
 *
 * This file is part of Essentia
 *
 * Essentia is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation (FSF), either version 3 of the License, or (at your
 * option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the Affero GNU General Public License
 * version 3 along with this program.  If not, see http://www.gnu.org/licenses/
 */

// NOTE: This source code is auto-generated.

#include <stdio.h>
#include <essentia/algorithmfactory.h>
#include <essentia/essentiamath.h>
#include <essentia/pool.h>
#include "essentiajs.h"

using namespace essentia;
using namespace essentia::standard;

// set to false to initialize essentia algo registry for the very first time
bool esInitStatus = false;

// method to instantiate the essentia algo registry with an optional argument to enable debug mode 
void EssentiaJS::initState(bool debugger) {
	// if true sets essentia debugger active
	if (debugger) {
		setDebugLevel(EAll); // EAll is a special value in essentia that contains all modules
		unsetDebugLevel(EMemory | EConnectors);
		essentia::warningLevelActive = true; // activate warnings
		essentia::infoLevelActive = true;    // activate info
		essentia::errorLevelActive = true;    // activate error level
	}
	// if needed, init essentia algorithm registry
	if (!esInitStatus) {
		essentia::init();
	 	esInitStatus = true;
		essentiaVersion = essentia::version;
    }
}

// method to shutdown essentia instance
void EssentiaJS::shutDown() {
	essentia::shutdown();
	esInitStatus = false;
}

// Method for frameCutting the given audio signal
std::vector<std::vector<float> > EssentiaJS::frameGenerator(std::vector<float>& signal, int frameSize, int hopSize) {

	AlgorithmFactory& factory = standard::AlgorithmFactory::instance();
	Algorithm* fc   = factory.create("FrameCutter",
									 "frameSize", frameSize,
									 "hopSize", hopSize);

	Pool pool;
	
	std::vector<float> frame;
	fc->input("signal").set(signal);
	fc->output("frame").set(frame);

	while (true) {
		// compute a frame
		fc->compute();
		// if it was the last one (ie: it was empty), then we're done.
		if (!frame.size()) {
			break;
		}
		// if the frame is silent, just drop it and go on processing
		if (isSilent(frame)) continue;

		pool.add("frames", frame);
	}

	delete fc;
	return pool.value<std::vector<std::vector<float> > >("frames");
}


// TODO
/*[[[cog
import cog
from .essentia_parser import generate_algorithms
algo_dicts = generate_algorithms()
for ln in algo_dicts:
	cog.outl(ln)
]]]*/