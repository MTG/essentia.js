/*
 * Copyright (C) 2006-2020  Music Technology Group - Universitat Pompeu Fabra
 *
 * This file is part of Essentia
 *
 * Essentia is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation (FSF), either version 3 of the License, or (at your
 * option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the Affero GNU General Public License
 * version 3 along with this program.  If not, see http://www.gnu.org/licenses/
 */

// NOTE: This source code is machine-generated.

#include <essentia/pool.h>
#include "essentiajs.h"


// convert a Float32 JS typed array into std::vector<float>
// https://github.com/emscripten-core/emscripten/issues/5519#issuecomment-589702756
std::vector<float> float32ArrayToVector(const val &arr) {
  unsigned int length = arr["length"].as<unsigned int>();
  std::vector<float> vec(length);
  val heap = val::module_property("HEAPU8");
  val memory = heap["buffer"];
  val memoryView = val::global("Float32Array").new_(memory, reinterpret_cast<std::uintptr_t>(vec.data()), length);
  // https://github.com/emscripten-core/emscripten/issues/5519#issuecomment-333302296
  vec.reserve(length);
  memoryView.call<void>("set", arr);
  return vec;
}

void _initEssentia(bool debugger) {
  if (debugger) {
    // if true sets essentia debugger active
    // EAll is a special value in essentia that contains all modules
    setDebugLevel(EAll); 
    unsetDebugLevel(EMemory | EConnectors);
    // activate warnings
    essentia::warningLevelActive = true; 
    // activate info
    essentia::infoLevelActive = true;
    // activate error level    
    essentia::errorLevelActive = true;    
  } else {
    essentia::infoLevelActive = false;
    essentia::warningLevelActive = false;
  }
  essentia::init();
}

// START FrameGenerator definitions
FrameGenerator::FrameGenerator(int frameSize, int hopSize) {
  _framecutter = AlgorithmFactory::create("FrameCutter",
                "frameSize", frameSize,
                "hopSize", hopSize);
}
FrameGenerator::~FrameGenerator() {
  delete _framecutter;
}
void FrameGenerator::configure(int frameSize, int hopSize) {
  _framecutter->configure("frameSize", frameSize, "hopSize", hopSize);
}
std::vector<std::vector<float> > FrameGenerator::compute(const val& signalArray) {
  // convert JS typed typed float 32 array to std::vector<float>
  std::vector<float> signal = float32ArrayToVector(signalArray);

  Pool pool;
  std::vector<float> frame;
  _framecutter->input("signal").set(signal);
  _framecutter->output("frame").set(frame);
  while (true) {
    // compute a frame
    _framecutter->compute();
    // if it was the last one (ie: it was empty), then we're done.
    if (!frame.size()) {
      break;
    }
    // if the frame is silent, just drop it and go on processing
    if (isSilent(frame)) continue;
    pool.add("frames", frame);
  }

  return pool.value< std::vector<std::vector<float> > >("frames");
}

void FrameGenerator::reset() {
  _framecutter->reset();
}
// END FrameGenerator definitions

// This a wrapper for MonoMixer algorithm to accept both left and right channels to downmix an stereo channel input to mono
// check https://essentia.upf.edu/reference/std_MonoMixer.html for algorithm details
// TODO: could be reimplemented with BinaryOperator and UnaryOperator in the future
// val EssentiaJS::MonoMixer(std::vector<float>& left_channel, std::vector<float>& right_channel) {
//   AlgorithmFactory& factory = standard::AlgorithmFactory::instance();

//   // TODO: remove this stereosample cresting overhead in future 
//   Algorithm* algoStereoMuxer = factory.create("StereoMuxer");
//   algoStereoMuxer->input("left").set(left_channel);
//   algoStereoMuxer->input("right").set(right_channel);
//   std::vector<StereoSample> stereoSignal;
//   algoStereoMuxer->output("audio").set(stereoSignal);
//   algoStereoMuxer->compute();
//   delete algoStereoMuxer;

//   Algorithm* algoMonoMixer = factory.create("MonoMixer");
//   std::vector<float> output_audio;
//   algoMonoMixer->input("audio").set(stereoSignal);
//   // set numberChannels=2 since we only deal with stereo signal in this wrapper
//   algoMonoMixer->input("numberChannels").set(2);
//   algoMonoMixer->output("audio").set(output_audio);
//   algoMonoMixer->compute();

//   val outputMonoMixer(val::object());
//   outputMonoMixer.set("audio", output_audio);
//   delete algoMonoMixer;
//   return outputMonoMixer;
// };

// This a wrapper for LoudnessEBUR128 algorithm to accept both left and right channels of an stereo audio signal seperately
// check https://essentia.upf.edu/reference/std_LoudnessEBUR128.html for algorithm details
LoudnessEBUR128::LoudnessEBUR128(const float hopSize, const float sampleRate, const bool startAtZero) {
  _algoStereoMuxer = AlgorithmFactory::create("StereoMuxer");
  _algoLoudnessEBUR128 = AlgorithmFactory::create("LoudnessEBUR128", "hopSize", hopSize, "sampleRate", sampleRate, "startAtZero", startAtZero);
}

LoudnessEBUR128::~LoudnessEBUR128() {
  if (_algoStereoMuxer) delete _algoStereoMuxer;
  if (_algoLoudnessEBUR128) delete _algoLoudnessEBUR128;
}

void LoudnessEBUR128::configure(const float hopSize, const float sampleRate, const bool startAtZero) {
  _algoStereoMuxer->configure();
  _algoLoudnessEBUR128->configure("hopSize", hopSize, "sampleRate", sampleRate, "startAtZero", startAtZero);
}

val LoudnessEBUR128::compute(std::vector<float>& left_channel, std::vector<float>& right_channel) {
  _algoStereoMuxer->input("left").set(left_channel);
  _algoStereoMuxer->input("right").set(right_channel);
  std::vector<StereoSample> stereoSignal;
  _algoStereoMuxer->output("audio").set(stereoSignal);
  _algoStereoMuxer->compute();

  _algoLoudnessEBUR128->input("signal").set(stereoSignal);
  std::vector<float> output_momentaryLoudness;
  std::vector<float> output_shortTermLoudness;
  float output_integratedLoudness;
  float output_loudnessRange;
  _algoLoudnessEBUR128->output("momentaryLoudness").set(output_momentaryLoudness);
  _algoLoudnessEBUR128->output("shortTermLoudness").set(output_shortTermLoudness);
  _algoLoudnessEBUR128->output("integratedLoudness").set(output_integratedLoudness);
  _algoLoudnessEBUR128->output("loudnessRange").set(output_loudnessRange);
  _algoLoudnessEBUR128->compute();
  val outputLoudnessEBUR128(val::object());
  outputLoudnessEBUR128.set("momentaryLoudness", output_momentaryLoudness);
  outputLoudnessEBUR128.set("shortTermLoudness", output_shortTermLoudness);
  outputLoudnessEBUR128.set("integratedLoudness", output_integratedLoudness);
  outputLoudnessEBUR128.set("loudnessRange", output_loudnessRange);

  return outputLoudnessEBUR128;
}

void LoudnessEBUR128::reset() {
  _algoStereoMuxer->reset();
  _algoLoudnessEBUR128->reset();
}

// NOTE: The following code snippets are machine generated. Do not edit.
/*[[[cog
import cog
from code_generator import generate_algorithms
algos = generate_algorithms()
for algo in algos:
  for ln in algo:
    cog.outl(ln)
]]]*/
//[[[end]]]