/*
 * Copyright (C) 2006-2020  Music Technology Group - Universitat Pompeu Fabra
 *
 * This file is part of Essentia
 *
 * Essentia is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation (FSF), either version 3 of the License, or (at your
 * option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the Affero GNU General Public License
 * version 3 along with this program.  If not, see http://www.gnu.org/licenses/
 */

// NOTE: This source code is auto-generated.
#include <emscripten/bind.h>
#include "./includes/essentiajs.h"

// expose essentiajs class to js using embind wrappers
EMSCRIPTEN_BINDINGS(CLASS_EssentiaJS) {
  function("init", &_initEssentia);
  constant("algorithmNames", ALGORITHM_NAMES);
  class_<FrameGenerator>("FrameGenerator")
    .constructor<int, int>()
    .function("configure", &FrameGenerator::configure)
    .function("compute", &FrameGenerator::compute)
    .function("reset", &FrameGenerator::reset)
    ;
  class_<LoudnessEBUR128>("LoudnessEBUR128")
    .constructor<float, float, bool>()
    .function("configure", &LoudnessEBUR128::configure)
    .function("compute", &LoudnessEBUR128::compute)
    .function("reset", &LoudnessEBUR128::reset)
    ;
  // NOTE: The following code snippets are machine generated. Do not edit.
  /*[[[cog
  import cog
  from code_generator import generate_bindings

  bindings = generate_bindings()
  for ln in bindings:
    cog.outl(ln)
  ]]]*/
  //[[[end]]]
  // utility function to convert a Float32 JS typed array into std::vector<float>
  function("arrayToVector", &float32ArrayToVector);
  // expose stl datatypes to js
  register_vector<int>("VectorInt");
  register_vector<float>("VectorFloat");
  register_vector<double>("VectorDouble");
  register_vector<std::string>("VectorString");
  register_vector<std::vector<float>>("VectorVectorFloat");
  register_vector<std::vector<double>>("VectorVectorDouble");
}
